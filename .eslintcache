[{"C:\\data\\simpleStocks\\stocks-simple-api\\stocks-client\\src\\index.js":"1","C:\\data\\simpleStocks\\stocks-simple-api\\stocks-client\\src\\App.js":"2","C:\\data\\simpleStocks\\stocks-simple-api\\stocks-client\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":9006,"mtime":1611933300517,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1eu3b3f",{"filePath":"11","messages":"12","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"C:\\data\\simpleStocks\\stocks-simple-api\\stocks-client\\src\\index.js",[],["16","17"],"C:\\data\\simpleStocks\\stocks-simple-api\\stocks-client\\src\\App.js",["18","19","20","21","22","23","24","25","26","27"],"import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport equal from \"fast-deep-equal\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      view: \"chart\",\n      results: [],\n      stocks: [],\n      timeSeries: \"daily\",\n      previousQueries: [],\n    };\n  }\n\n  componentDidUpdate() {\n    let { results, view } = this.state;\n    if (results.length && view == \"chart\")\n      results.forEach((r, i) => {\n        let k = Object.keys(r).filter((x) => x != \"Meta Data\")[0];\n        let tp = k.includes(\"min\") ? \"%Y-%m-%d %H:%M:%S\" : \"%Y-%m-%d\";\n        setTimeout(() => {\n          this.drawChart(\n            r[\"Meta Data\"][\"2. Symbol\"],\n            Object.keys(r[k]).map((date) => {\n              return {\n                date: d3.timeParse(tp)(date),\n                value: r[k][date][\"4. close\"],\n              };\n            })\n          );\n        }, 500);\n      });\n  }\n\n  getStock(tickers, timeSeries) {\n    fetch(`http://localhost:8080/stock`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n\n      body: JSON.stringify({\n        ticker: tickers,\n        type: timeSeries.split(\" \")[0],\n        min: timeSeries.split(\" \")[1],\n      }),\n    }).then((res) => {\n      res.json().then((data) => {\n        if (data.error) alert(data.error);\n        else {\n          let results = [data.data];\n          let pq = { tickers, timeSeries, results };\n          let previousQueries = [...this.state.previousQueries, pq];\n          this.setState({ results, previousQueries });\n        }\n      });\n    });\n  }\n\n  getMultipleStocks(tickers, timeSeries) {\n    fetch(`http://localhost:8080/stocks`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n\n      body: JSON.stringify({\n        tickers: tickers,\n        type: timeSeries.split(\" \")[0],\n        min: timeSeries.split(\" \")[1],\n      }),\n    }).then((res) => {\n      res.json().then((data) => {\n        if (data.error) alert(data.error);\n        else {\n          let results = data.data;\n          let pq = { tickers, timeSeries, results };\n          let previousQueries = [...this.state.previousQueries, pq];\n          this.setState({ results, previousQueries });\n        }\n      });\n    });\n  }\n\n  inputs() {\n    return (\n      <div>\n        <span>Time Series: </span>\n        <div style={{ display: \"flex\" }}>\n          <select\n            id=\"timeSeries\"\n            style={{ width: \"100%\" }}\n            defaultValue=\"daily\"\n            onChange={(e) => {\n              {\n                /* let timeSeries = e.target.value;\n              this.setState({ timeSeries }); */\n              }\n            }}\n          >\n            <option value=\"daily\">Daily</option>\n            <option value=\"intraday 15min\">Intraday 15min</option>\n            <option value=\"intraday 5min\">Intraday 5min</option>\n            <option value=\"intraday 1min\">Intraday 1min</option>\n          </select>\n        </div>\n        <span>Tickers: </span>\n        <div style={{ display: \"flex\" }}>\n          <input\n            id=\"tickers\"\n            style={{ width: \"100%\" }}\n            type=\"text\"\n            onInput={(e) => {\n              {\n                /* let stocks = e.target.value\n                .split(\",\")\n                .filter((s) => s)\n                .map((s) => s.trim());\n              this.setState({ stocks }); */\n              }\n            }}\n          ></input>\n        </div>\n      </div>\n    );\n  }\n\n  buttons() {\n    return (\n      <div style={{ textAlign: \"center\", margin: \"10px\" }}>\n        <button\n          onClick={() => {\n            let timeSeries = document.getElementById(\"timeSeries\").value;\n            let tickers = document\n              .getElementById(\"tickers\")\n              .value.split(\",\")\n              .filter((s) => s)\n              .map((s) => s.trim().toLowerCase());\n            let pq = this.state.previousQueries.find(\n              (x) => x.timeSeries == timeSeries && equal(x.tickers, tickers)\n            );\n            console.log(pq, this.state.previousQueries, tickers, timeSeries);\n            if (pq) {\n              this.setState({ results: pq.results });\n            } else\n              tickers.length === 1\n                ? this.getStock(tickers[0], timeSeries)\n                : this.getMultipleStocks(tickers, timeSeries);\n          }}\n        >\n          Get stock\n        </button>\n      </div>\n    );\n  }\n\n  list(r, height) {\n    let k = Object.keys(r).filter((x) => x != \"Meta Data\")[0];\n    let b = \"solid 1px rgba(0,0,0,0.1)\";\n    let s = { borderRight: b, borderBottom: b };\n    return (\n      <div>\n        <div\n          style={{\n            background: \"lightgray\",\n            display: \"grid\",\n            gridTemplateColumns: \"40% 30% 30%\",\n            marginRight: \"17px\",\n          }}\n        >\n          <div style={s}>Date/Time</div>\n          <div style={s}>Open</div>\n          <div style={s}>Close</div>\n        </div>\n        <div\n          style={{\n            borderBottom: \"solid 1px rgba(0,0,0,0.4)\",\n            display: \"grid\",\n            gridTemplateColumns: \"40% 30% 30%\",\n            overflow: \"auto\",\n            maxHeight: `${height}px`,\n          }}\n        >\n          {Object.keys(r[k]).map((dateTime) => {\n            return (\n              <React.Fragment key={dateTime}>\n                <div style={s}>{dateTime}</div>\n                <div style={s}>{r[k][dateTime][\"1. open\"]}</div>\n                <div style={s}>{r[k][dateTime][\"4. close\"]}</div>\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n\n  drawChart(symbol, data) {\n    let { results } = this.state;\n    var margin = { top: 10, right: 30, bottom: 30, left: 60 },\n      width = window.innerWidth - 200 - 50 - margin.left - margin.right,\n      height =\n        Math.max((window.innerHeight - 20) / results.length - 66, 300) -\n        margin.top -\n        margin.bottom;\n\n    // append the svg object to the body of the paged3\n    d3.select(`#${symbol}`).html(\"\");\n    var svg = d3\n      .select(`#${symbol}`)\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // Add X axis --> it is a date format\n    var x = d3\n      .scaleTime()\n      .domain(\n        d3.extent(data, function (d) {\n          return d.date;\n        })\n      )\n      .range([0, width]);\n    svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(d3.axisBottom(x));\n\n    // Add Y axis\n    var y = d3\n      .scaleLinear()\n      .domain([\n        d3.min(data, function (d) {\n          return +d.value;\n        }),\n        d3.max(data, function (d) {\n          return +d.value;\n        }),\n      ])\n      .range([height, 0]);\n    svg.append(\"g\").call(d3.axisLeft(y));\n\n    // Add the line\n    svg\n      .append(\"path\")\n      .datum(data)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"steelblue\")\n      .attr(\"stroke-width\", 1.5)\n      .attr(\n        \"d\",\n        d3\n          .line()\n          .x(function (d) {\n            return x(d.date);\n          })\n          .y(function (d) {\n            return y(d.value);\n          })\n      );\n  }\n\n  showResults() {\n    let { results, view } = this.state;\n    // set the dimensions and margins of the graph\n\n    return (\n      <div>\n        {results.map((r, i) => {\n          let k = Object.keys(r).filter((x) => x != \"Meta Data\")[0];\n          let b = \"solid 1px rgba(0,0,0,0.1)\";\n          let s = { borderRight: b, borderBottom: b };\n          let h = Math.max(\n            (window.innerHeight - 20) / results.length - 66,\n            300\n          );\n          return (\n            <div key={i}>\n              <div>\n                <div>Symbol: {r[\"Meta Data\"][\"2. Symbol\"].toUpperCase()}</div>\n                <div>{r[\"Meta Data\"][\"1. Information\"]}</div>\n              </div>\n              {view == \"chart\" ? (\n                <div id={r[\"Meta Data\"][\"2. Symbol\"]}></div>\n              ) : (\n                this.list(r, h)\n              )}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: \"200px auto\",\n          gridGap: \"10px\",\n          margin: \"10px\",\n          textAlign: \"center\",\n        }}\n      >\n        <div\n          style={{\n            padding: \"5px\",\n            boxShadow: \"0 0 5px rgba(0,0,0,0.5)\",\n          }}\n        >\n          <h2>Lookup Stocks</h2>\n          {this.inputs()}\n          {this.buttons()}\n        </div>\n        <div\n          style={{\n            boxShadow: \"0 0 5px rgba(0,0,0,0.5)\",\n            maxHeight: \"calc(100vh - 20px)\",\n            overflow: \"auto\",\n          }}\n        >\n          {this.showResults()}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","C:\\data\\simpleStocks\\stocks-simple-api\\stocks-client\\src\\reportWebVitals.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":20,"column":32,"nodeType":"34","messageId":"35","endLine":20,"endColumn":34},{"ruleId":"32","severity":1,"message":"36","line":22,"column":48,"nodeType":"34","messageId":"35","endLine":22,"endColumn":50},{"ruleId":"37","severity":1,"message":"38","line":98,"column":15,"nodeType":"39","messageId":"40","endLine":101,"endColumn":16},{"ruleId":"37","severity":1,"message":"38","line":117,"column":15,"nodeType":"39","messageId":"40","endLine":123,"endColumn":16},{"ruleId":"32","severity":1,"message":"33","line":143,"column":35,"nodeType":"34","messageId":"35","endLine":143,"endColumn":37},{"ruleId":"32","severity":1,"message":"36","line":161,"column":44,"nodeType":"34","messageId":"35","endLine":161,"endColumn":46},{"ruleId":"41","severity":1,"message":"42","line":275,"column":15,"nodeType":"43","messageId":"44","endLine":275,"endColumn":16},{"ruleId":"32","severity":1,"message":"36","line":275,"column":50,"nodeType":"34","messageId":"35","endLine":275,"endColumn":52},{"ruleId":"41","severity":1,"message":"45","line":277,"column":15,"nodeType":"43","messageId":"44","endLine":277,"endColumn":16},{"ruleId":"32","severity":1,"message":"33","line":288,"column":21,"nodeType":"34","messageId":"35","endLine":288,"endColumn":23},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unused-vars","'k' is assigned a value but never used.","Identifier","unusedVar","'s' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]